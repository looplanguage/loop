# Picasso Pipeline
stages:
  - docker              # Builds and publishes the docker image needed in all further stages

  # Runs only on merge requests
  - lint                # cargo clippy & fmt
  - check               # Checks for quick compilation issues
  - test                # Windows + Linux, cargo test and integration_test.py

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

publish docker:
  variables:
    TAG_LATEST: $CI_REGISTRY_IMAGE:latest
    TAG_COMMIT: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  image: docker:latest
  stage: docker
  only:
    changes:
      - Cargo.lock
      - Cargo.toml
      - Testing.Dockerfile
  services:
    - docker:dind
  script:
    - docker build -t $TAG_COMMIT -t $TAG_LATEST -f Testing.Dockerfile .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST

lint:
  image: $CI_REGISTRY/looplanguage/picasso:latest
  stage: lint
  script:
    - cargo clippy -- -D warnings
    - cargo fmt --all -- --check

test:
  image: $CI_REGISTRY/looplanguage/picasso:latest
  stage: test
  script:
    - cargo test