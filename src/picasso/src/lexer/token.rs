//! Helper for tokens generated by the Lexer
#[derive(Clone, Debug)]
pub struct Token {
    pub token: TokenType,
    pub literal: String,
}

impl Token {
    pub fn literal_len(&self) -> i32 {
        self.literal.len() as i32
    }

    pub fn display(&self) {
        println!("TokenType: {:?} - Literal: {}", self.token, self.literal)
    }
}

#[derive(PartialEq, Clone, Debug, Copy, Eq, Hash)]
pub enum TokenType {
    /// Variable name
    Identifier,
    /// Example: 'var'
    VariableDeclaration,
    /// Example: 'const'
    ConstantDeclaration,
    /// Example: Positive and negative number without decimal
    Integer,
    /// Example: Positive number with decimal
    Float,
    /// Example: Negative number with decimal
    MinusFloat,
    /// Example:  ';'
    Semicolon,
    /// Example: '+'
    Plus,
    /// Example: '-'
    Minus,
    /// Example: '*'
    Multiply,
    /// Example: '='
    Assign,
    /// Example: '/'
    Divide,
    /// Example: '%'
    Modulo,
    /// Example: '^'
    Power,
    /// Example: '@'
    AtSign,
    /// Example: '('
    LeftParenthesis,
    /// Example: ')'
    RightParenthesis,
    /// Example: '&'
    AndSign,
    /// Example: '!'
    InvertSign,
    /// Example: '#'
    HashSign,
    /// Example: '$'
    DollarSign,
    /// Example: '>'
    RightArrow,
    /// Example: '<'
    LeftArrow,
    /// Example: ','
    Comma,
    /// Example: '{'
    LeftBrace,
    /// Example: '}'
    RightBrace,
    /// Example: '.'
    Dot,
    /// Example: '..'
    Range,
    /// Example: '['
    LeftBracket,
    /// Example: ']'
    RightBracket,
    /// Example: ':'
    Colon,
    /// Example: '=='
    Equals,
    /// Example: '!='
    NotEquals,
    /// Example: '>='
    GreaterThanOrEquals,
    /// Example: '<='
    LessThanOrEquals,
    /// Example: 'true' value
    True,
    /// Example: 'false' value
    False,
    /// Example: 'fn'
    Function,
    /// Example: 'if'
    If,
    /// Example: 'else'
    Else,
    /// Example: 'import'
    Import,
    /// Example: 'export'
    Export,
    /// Example: '&&' and 'and'
    And,
    /// Example: '||' and 'or'
    Or,
    /// Example: 'null' value
    Null,
    /// Example: 'return'
    Return,
    /// Description: A piece of text
    ///
    /// Example: "I am a piece of text"
    String,
    /// Example: 'as'
    As,
    /// Example: 'for'
    For,
    /// Example: 'from'
    From,
    /// Example: 'to'
    To,
    /// Example: 'in'
    In,
    /// Example: 'break'
    Break,
    FunctionType,
    Class,
    Extends,
    Unknown,
    Public,
    /// Indicates that there are no more tokens
    Eof,
}

pub fn create_token(token: TokenType, literal: String) -> Token {
    Token { token, literal }
}
